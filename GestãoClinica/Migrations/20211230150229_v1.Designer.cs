// <auto-generated />
using System;
using GestãoClinica.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestãoClinica.Migrations
{
    [DbContext(typeof(Contexo))]
    [Migration("20211230150229_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GestãoClinica.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Telephone")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GestãoClinica.Models.Exams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameExams")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("GestãoClinica.Models.ListExams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ExamsId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodicConsultationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PeriodicConsultationId");

                    b.ToTable("ListExams");
                });

            modelBuilder.Entity("GestãoClinica.Models.PeriodicConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateQuery")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdExams")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdExams");

                    b.HasIndex("IdPatient");

                    b.ToTable("PeriodicConsultation");
                });

            modelBuilder.Entity("GestãoClinica.Models.Company", b =>
                {
                    b.HasBaseType("GestãoClinica.Models.Address");

                    b.Property<long>("CNPJ")
                        .HasColumnType("bigint");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("GestãoClinica.Models.Doctor", b =>
                {
                    b.HasBaseType("GestãoClinica.Models.Address");

                    b.Property<long>("CPF")
                        .HasColumnType("bigint");

                    b.Property<long?>("CRM")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("GestãoClinica.Models.Patient", b =>
                {
                    b.HasBaseType("GestãoClinica.Models.Address");

                    b.Property<long>("CPF")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<int>("IdHealthPlan")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdHealthPlan");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("GestãoClinica.Models.HealthPlan", b =>
                {
                    b.HasBaseType("GestãoClinica.Models.Company");

                    b.ToTable("HealthPlan");
                });

            modelBuilder.Entity("GestãoClinica.Models.ListExams", b =>
                {
                    b.HasOne("GestãoClinica.Models.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamsId");

                    b.HasOne("GestãoClinica.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("GestãoClinica.Models.PeriodicConsultation", "PeriodicConsultation")
                        .WithMany()
                        .HasForeignKey("PeriodicConsultationId");

                    b.Navigation("Exams");

                    b.Navigation("Patient");

                    b.Navigation("PeriodicConsultation");
                });

            modelBuilder.Entity("GestãoClinica.Models.PeriodicConsultation", b =>
                {
                    b.HasOne("GestãoClinica.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestãoClinica.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestãoClinica.Models.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("IdExams")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestãoClinica.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Doctor");

                    b.Navigation("Exams");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("GestãoClinica.Models.Company", b =>
                {
                    b.HasOne("GestãoClinica.Models.Address", null)
                        .WithOne()
                        .HasForeignKey("GestãoClinica.Models.Company", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestãoClinica.Models.Doctor", b =>
                {
                    b.HasOne("GestãoClinica.Models.Address", null)
                        .WithOne()
                        .HasForeignKey("GestãoClinica.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestãoClinica.Models.Patient", b =>
                {
                    b.HasOne("GestãoClinica.Models.Address", null)
                        .WithOne()
                        .HasForeignKey("GestãoClinica.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GestãoClinica.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestãoClinica.Models.HealthPlan", "HealthPlan")
                        .WithMany()
                        .HasForeignKey("IdHealthPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("HealthPlan");
                });

            modelBuilder.Entity("GestãoClinica.Models.HealthPlan", b =>
                {
                    b.HasOne("GestãoClinica.Models.Company", null)
                        .WithOne()
                        .HasForeignKey("GestãoClinica.Models.HealthPlan", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
